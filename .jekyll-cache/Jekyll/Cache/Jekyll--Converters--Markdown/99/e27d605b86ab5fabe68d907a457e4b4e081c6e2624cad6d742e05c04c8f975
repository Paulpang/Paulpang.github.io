I"^<h2 id="一flexbox布局">一、FlexBox布局</h2>
<h3 id="1-flexbox的含义">1 FlexBox的含义</h3>

<p><strong>flexible（形容词)</strong>：能够伸缩或者很容易变化，以适应外界条件的变化
<strong>box（名词)</strong>：通用的矩形容器</p>

<h3 id="2-什么是flexbox布局">2 什么是FlexBox布局?</h3>

<p>弹性盒模型（The Flexible Box Module）,又叫Flexbox，意为“弹性布局”，旨在通过弹性的方式来对齐和分布容器中内容的空间，使其能适应不同屏幕，为盒装模型提供最大的灵活性。
       Flex布局主要思想是：让容器有能力让其子项目能够改变其宽度、高度（甚至是顺序），以最佳方式填充可用空间；
       React native中的FlexBox是这个规范的一个子集。### 3 查询react-native的npm包最新版本</p>

<h2 id="二flexbox在开发中的应用场景">二、Flexbox在开发中的应用场景</h2>
<h3 id="21-flexbox在布局中能够解决什么问题">2.1 Flexbox在布局中能够解决什么问题？</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 浮动布局
 各种机型屏幕的适配
 水平和垂直居中
 自动分配宽度
 ......
</code></pre></div></div>

<h3 id="22-在css中常规的布局是基于块和内联流方向而flex布局是基于flex-flow流下图很好解释了flex布局的思想">2.2 在CSS中，常规的布局是基于块和内联流方向，而Flex布局是基于flex-flow流,下图很好解释了Flex布局的思想：</h3>

<blockquote>
  <p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。</p>
</blockquote>

<blockquote>
  <p>项目默认沿主轴排列，单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。</p>
</blockquote>

<h2 id="三flexbox的常用属性">三、Flexbox的常用属性</h2>

<h3 id="31-容器属性">3.1 容器属性</h3>
<p>a)  flexDirection: <code class="language-plaintext highlighter-rouge">row | row-reverse | column | column-reverse</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>该属性决定主轴的方向（即项目的排列方向）。
row：主轴为水平方向，起点在左端。
row-reverse：主轴为水平方向，起点在右端。
column<span class="o">(</span>默认值<span class="o">)</span>：主轴为垂直方向，起点在上沿。
column-reverse：主轴为垂直方向，起点在下沿。
</code></pre></div></div>

<p>b）justifyContent:<code class="language-plaintext highlighter-rouge">flex-start | flex-end | center | space-between | space-around</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>定义了伸缩项目在主轴线的对齐方式
flex-start<span class="o">(</span>默认值<span class="o">)</span>：伸缩项目向一行的起始位置靠齐。
flex-end：伸缩项目向一行的结束位置靠齐。
center：伸缩项目向一行的中间位置靠齐。
space-between：两端对齐，项目之间的间隔都相等。
space-around：伸缩项目会平均地分布在行里，两端保留一半的空间。
</code></pre></div></div>

<p>c） alignItems:  <code class="language-plaintext highlighter-rouge">flex-start | flex-end | center | baseline | stretch</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 定义项目在交叉轴上如何对齐，可以把其想像成侧轴（垂直于主轴）的“对齐方式”。
 flex-start：交叉轴的起点对齐。
 flex-end：交叉轴的终点对齐 。
 center：交叉轴的中点对齐。
 baseline：项目的第一行文字的基线对齐。
 stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。
</code></pre></div></div>

<p>d)  flexWrap: <code class="language-plaintext highlighter-rouge">nowrap | wrap | wrap-reverse</code></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 默认情况下，项目都排在一条线（又称<span class="s2">"轴线"</span>）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。
 nowrap<span class="o">(</span>默认值<span class="o">)</span>：不换行。
 wrap：换行，第一行在上方。
 wrap-reverse：换行，第一行在下方。（和wrap相反）
</code></pre></div></div>
<h3 id="32-元素属性">3.2 元素属性</h3>
<p>a）flex</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>“flex-grow”、“flex-shrink”和“flex-basis”三个属性的缩写， 其中第二个和第三个参数（flex-shrink、flex-basis）是可选参数。
    
默认值为“0 1 auto”。
宽度 ＝ 弹性宽度 <span class="k">*</span> <span class="o">(</span> flexGrow / <span class="nb">sum</span><span class="o">(</span> flexGorw <span class="o">)</span> <span class="o">)</span>
</code></pre></div></div>

<p>b）alignSelf:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> “auto | flex-start | flex-end | center | baseline | stretch”
align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。
</code></pre></div></div>

<h2 id="四在react-native中使用flexbox">四、在React Native中使用Flexbox</h2>
<h3 id="41--获取当前屏幕的宽度高度分辨率">4.1  获取当前屏幕的宽度、高度、分辨率</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var Dimensions <span class="o">=</span> require<span class="o">(</span><span class="s2">"Dimensions"</span><span class="o">)</span><span class="p">;</span>
var <span class="o">{</span>width, height, scale<span class="o">}</span> <span class="o">=</span> Dimensions.get<span class="o">(</span><span class="s2">"window"</span><span class="o">)</span><span class="p">;</span>
</code></pre></div></div>
<p>获取当前屏幕的信息</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span>default class App extends Component&lt;<span class="o">{}&gt;</span> <span class="o">{</span>
  render<span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="o">(</span>

      &lt;View <span class="nv">style</span><span class="o">={</span>styles.container<span class="o">}&gt;</span>
              &lt;Text <span class="nv">style</span><span class="o">={</span>styles.oneStyle<span class="o">}&gt;</span>当前视图的宽度:<span class="o">{</span>
                  width
              <span class="o">}</span>&lt;/Text&gt;
              &lt;Text <span class="nv">style</span><span class="o">={</span>styles.twoStyle<span class="o">}&gt;</span>当前视图的高度:<span class="o">{</span>
                  height
              <span class="o">}</span>&lt;/Text&gt;
              &lt;Text <span class="nv">style</span><span class="o">={</span>styles.threeStyle<span class="o">}&gt;</span>当前视图的分辨率:<span class="o">{</span>
                  scale
              <span class="o">}</span>&lt;/Text&gt;

      &lt;/View&gt;
    <span class="o">)</span><span class="p">;</span>
  <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>
:ET