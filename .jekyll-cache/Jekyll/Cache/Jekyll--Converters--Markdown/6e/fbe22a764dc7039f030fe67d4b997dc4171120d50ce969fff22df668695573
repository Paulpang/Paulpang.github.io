I"Y"<p>React Native组件的生命周期大致上可以划分为<strong>实例化阶段</strong>、<strong>存在阶段</strong>和<strong>销毁阶段</strong>，如图所示:</p>

<p><img src="/images/posts/RNLifeTime/1.png" alt="" /></p>

<p>其中最常用的为<strong>实例化阶段</strong>，该阶段就是组件的构建、展示时期，需要我们根据几个函数的调用过程，控制好组件的展示和逻辑的处理。</p>

<h3 id="一实例化阶段函数功能分析">一、实例化阶段函数功能分析</h3>

<h4 id="getdefaultprops">getDefaultProps</h4>

<p>该函数用于初始化一些默认的属性，通常会将固定的内容放在这个函数 中进行初始化和赋值；</p>

<p>在组件中，可以利用<code class="language-plaintext highlighter-rouge">this.props</code>获取在这里初始化它的属性，由于组件初始化后，再次使用该组件不会调用getDefaultProps函数，所以组件自己不可以自己修改props（即：props可认为是只读的），只可由其他组件调用它时在外部修改。</p>

<h4 id="getinitialstate">getInitialState</h4>
<p>该函数是用于对组件的一些状态进行初始化；</p>

<p>由于该函数不同于getDefaultProps，在以后的过程中，会再次调用，所以可以将控制控件的状态的一些变量放在这里初始化，如控件上显示的文字，可以通过<code class="language-plaintext highlighter-rouge">this.state</code>来获取值，通过<code class="language-plaintext highlighter-rouge">this.setState</code>来修改state值， 比如：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>this.setState<span class="o">({</span>
    activePage: activePage, 
    currentX: contentOffSetX  
<span class="o">})</span><span class="p">;</span>
</code></pre></div></div>
<p><strong>注意:</strong> 一旦调用了<code class="language-plaintext highlighter-rouge">this.setState</code>方法，组件一定会调用<code class="language-plaintext highlighter-rouge">render</code>方法，对组件进行再次的渲染，不过，如果React框架会自动根据DOM的状态来判断是否需要真正的渲染。</p>

<h4 id="componentwillmount">componentWillMount</h4>
<p>相当于OC中的ViewWillAppear方法，在组件将要被加载在视图上之前调用，功能相对较少。</p>

<h4 id="render">render</h4>
<p>render是一个组件中必须有的方法，本质上是一个函数，并返回JSX或其他组件来构成DOM，和Android的XML布局类似，注意：<code class="language-plaintext highlighter-rouge">只能返回一个顶级元素</code>;</p>

<p>此外，在render函数中，只可通过this.state和this.props来访问在之前函数中初始化的数据值 。</p>

<h4 id="componentdidmount">componentDidMount</h4>
<p>在调用了render方法后，组件加载成功并被成功渲染出来以后，所要执行的后续操作，一般会在这个函数中处理网络请求等加载数据的操作；</p>

<p>因为UI已经成功被渲染出来， 所以放在这个函数里进行请求操作，不会出现UI上的错误。
下图是利用了fetch API来异步请求Web API来加载数据：</p>

<p><img src="/images/posts/RNLifeTime/2.png" alt="" /></p>

<h3 id="二存在期阶段函数功能分析">二、存在期阶段函数功能分析</h3>

<ul>
  <li>
    <p>componentWillReceiveProps  <br />
指父元素对组件的props或state进行了修改</p>
  </li>
  <li>
    <p>shouldComponentUpdate  <br />
一般用于优化，可以返回false或true来控制是否进行渲染</p>
  </li>
  <li>
    <p>componentWillUpdate
组件刷新前调用，类似componentWillMount</p>
  </li>
  <li>
    <p>componentDidUpdate
更新后的hook</p>
  </li>
</ul>

<h3 id="三销毁期阶段函数功能分析">三、销毁期阶段函数功能分析</h3>

<p>用于清理一些无用的内容，如：点击事件Listener，只有一个过程：<code class="language-plaintext highlighter-rouge">componentWillUnmount</code></p>

<h3 id="四常用知识点分析">四、常用知识点分析</h3>
<h4 id="41--thisstate">4.1  this.state</h4>
<p>开发中组件免不了要与用户互动，React 的一大创新，就是将组件看成是一个状态机，一开始有一个初始状态，然后用户互动，导致状态变化，从而触发重新渲染 UI。
举个例子：</p>

<p><img src="/images/posts/RNLifeTime/3.png" alt="" /></p>

<p>当用户点击组件，导致状态变化，<code class="language-plaintext highlighter-rouge">this.setState</code> 方法就修改状态值，每次修改以后，自动调用 <code class="language-plaintext highlighter-rouge">this.render</code> 方法，再次渲染组件。</p>

<p>可以把组件看成一个“状态机”. 根据不同的status有不同的UI展示。只要使用setState改变状态值，根据diff算法算出来有差以后，就会执行ReactDom的render方法，重新渲染页面。</p>

<p><strong>注意：</strong>由于 <code class="language-plaintext highlighter-rouge">this.props</code> 和 <code class="language-plaintext highlighter-rouge">this.state</code> 都用于描述组件的特性，可能会产生混淆。一个简单的区分方法是，<code class="language-plaintext highlighter-rouge">this.props</code> 表示那些一旦定义，就不再改变的特性，而 <code class="language-plaintext highlighter-rouge">this.state</code> 是会随着用户互动而产生变化的特性。</p>

<h4 id="42--获取真实的dom节点">4.2  获取真实的DOM节点</h4>
<p>在React Native中，组件并不是真实的 DOM 节点，而是存在于内存之中的一种数据结构，叫做虚拟 DOM （virtual DOM）。</p>

<p>只有当它插入文档以后，才会变成真实的 DOM 。
 根据 React 的设计，所有的 DOM 变动，都先在虚拟 DOM 上发生，然后再将实际发生变动的部分，反映在真实 DOM上，这种算法叫做 DOM diff，它可以极大提高网页的性能表现。
但是，有时需要从组件获取真实 DOM 的节点，这时就要用到 <code class="language-plaintext highlighter-rouge">ref</code> 属性;下图通过一个案例来演示：</p>

<p><img src="/images/posts/RNLifeTime/4.png" alt="" /></p>

<p>下图是利用了fetch API来异步请求Web API来加载数据：</p>

<p><img src="/images/posts/RNLifeTime/5.png" alt="" /></p>

<p>上面代码中，组件 View 的子节点有一个文本输入框，用于获取用户的输入。这时就必须获取真实的 DOM 节点，虚拟 DOM 是拿不到用户输入的。为了做到这一点，文本输入框必须有一个 ref属性，然后<code class="language-plaintext highlighter-rouge">this.refs.[refName]</code>就会返回这个真实的 DOM 节点。
      需要注意的是，由于 <strong>this.refs.[refName]</strong> 属性获取的是真实 DOM ，所以必须等到虚拟 DOM 插入文档以后，才能使用这个属性，否则会报错。上面代码中，通过为组件指定 Click 事件的回调函数，确保了只有等到真实 DOM 发生 Click 事件之后，才会读取 <code class="language-plaintext highlighter-rouge">this.refs.[refName]</code> 属性。</p>

<h3 id="五总结">五、总结</h3>
<p>React Native组件的生命周期，经历了<code class="language-plaintext highlighter-rouge">Mount-&gt;Update-&gt;Unmount</code>这三个大的过程，即从创建到销毁的过程，结合OC中的开发经验，我们在以上的基础上应该可以快速的上手React Native的开发。</p>

<h3 id="六es5和es6的差异化">六、ES5和ES6的差异化</h3>

<p>es5，es6 都是对 ecmascript规范的补充，es5已经大规模使用了，es6目前可能在个别平台存在浏览器兼容性问题。</p>

<h4 id="区别1创建组件">区别1：创建组件</h4>
<p>组件是一个自定义的js对象，在es5中使用React.createClass()；在es6中必须继承React.component，然后进行创建。</p>

<p>ES5的写法：</p>

<p><img src="/images/posts/RNLifeTime/6.png" alt="" /></p>

<p>ES6的写法：</p>

<p><img src="/images/posts/RNLifeTime/7.png" alt="" /></p>

<h4 id="区别2组件的属性props">区别2：组件的属性props</h4>

<p>在ES6中，其为属性：defaultProps(可以标识static定义在class内，也可以定义在class外)，而在ES5中，其为方法：getDefaultProps: function(){return {name:value}};</p>

<p>ES5:</p>

<p><img src="/images/posts/RNLifeTime/8.png" alt="" /></p>

<p>ES6:</p>

<p><img src="/images/posts/RNLifeTime/9.png" alt="" /></p>

<h4 id="区别3组件的状态state">区别3：组件的状态state</h4>

<p>ES5:</p>

<p><img src="/images/posts/RNLifeTime/10.png" alt="" /></p>

<p>ES6:</p>

<p><img src="/images/posts/RNLifeTime/11.png" alt="" /></p>

:ET