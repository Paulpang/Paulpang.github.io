I"&<h2 id="什么是css选择器">什么是CSS选择器</h2>
<p>按照一定的规则选出符合条件的元素，为之添加CSS样式</p>

<h2 id="选择器的种类繁多大概可以这么归类">选择器的种类繁多，大概可以这么归类</h2>

<h3 id="通用选择器universal-selector比如-">通用选择器（universal selector）(比如 *{})</h3>

<ul>
  <li>一般用来给所有元素作一些通用性的设置</li>
  <li>比如内边距、外边距</li>
</ul>

<p><strong>注意</strong> : 效率比较低，尽量不要使用</p>

<h3 id="元素选择器type-selectors比如div">元素选择器（type selectors）(比如div{})</h3>

<ul>
  <li>又叫标签选择器</li>
</ul>

<h3 id="类选择器class-selectors比如-name">类选择器（class selectors）(比如 .name{})</h3>

<ul>
  <li>一个元素可以有多个class值，每个class之间用空格隔开</li>
  <li>class值如果由多个单词组成，单词之间可以用中划线-、下划线_连接，也可以使用驼峰标识</li>
  <li>最好不要用标签名作为class值</li>
</ul>

<h3 id="id选择器id-selectors比如-name-">id选择器（id selectors）(比如 #name {})</h3>

<ul>
  <li>一个HTML文档里面的id值是唯一的，不能重复</li>
  <li>id值如果由多个单词组成，单词之间可以用中划线-、下划线_连接，也可以使用驼峰标识</li>
  <li>最好不要用标签名作为id值</li>
  <li>中划线又叫连字符（hyphen）</li>
</ul>

<h3 id="属性选择器attribute-selectors比如-hreftop">属性选择器（attribute selectors）(比如 [href=”top”])</h3>

<ul>
  <li>拥有title属性的元素</li>
</ul>

<h3 id="后代选择器-比如-div-span">后代选择器 (比如 div span)</h3>

<ul>
  <li>div元素里面的span元素（<strong>包括直接、间接子元素</strong>）</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>div span {
	color : red;
}
</code></pre></div></div>

<h3 id="子选择器-比如-divspan">子选择器 (比如 div&gt;span)</h3>

<ul>
  <li>div元素里面的<strong>直接</strong>span子元素（<strong>不包括间接子元素</strong>）</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>div&gt;span {
	color: red;
}
div &gt; span {
	color: red;
}

</code></pre></div></div>

<h3 id="相邻兄弟选择器-比如-divspan">相邻兄弟选择器 (比如 div+span)</h3>

<ul>
  <li>div元素后面<strong>紧挨着的p元素</strong>（<strong>且div、p元素必须是兄弟关系</strong>）</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>div+p {
	color: red;
}

</code></pre></div></div>
<h3 id="全体兄弟选择器-比如-divp">全体兄弟选择器 (比如 div~p)</h3>
<ul>
  <li>div元素<strong>后面的p元素</strong>（且div、p元素必须是兄弟关系）</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>div~p {
	color: red;
}

</code></pre></div></div>

<h3 id="交集选择器-比如-divonetitle">交集选择器 (比如 div.one#title)</h3>

<ul>
  <li><strong>同时</strong>符合2个条件的元素：div元素、class值有one</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>div.one {
	color: red;
}

</code></pre></div></div>

<h3 id="并集选择器-比如-divonetitle">并集选择器 (比如 div,.one,#title)</h3>
<ul>
  <li>所有的div元素 + 所有class值有one的元素 + 所有title属性值等于test的元素</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>div,.one,[title="test"] {
	color: red;
}

</code></pre></div></div>
<h3 id="伪类">伪类</h3>

<ul>
  <li>动态伪类
    <ul>
      <li>a:link 未访问的链接</li>
      <li>a:visited 已访问的链接</li>
      <li>a: hover 当鼠标移动到链接上</li>
      <li>a: active  当鼠标左键点击链接不松开</li>
      <li>a : focus 当链接呗tab健选择激活时</li>
      <li>:hover,:active,:focus还可以应用到其他元素上</li>
    </ul>

    <p><strong>使用注意</strong></p>

    <ul>
      <li>:hover必须放在:link和:visited后面才能完全生效</li>
      <li>:active必须放在:hover后面才能完全生效</li>
      <li>所以建议的编写顺序是 :link、:visited、:hover、:active</li>
      <li>记忆：女朋友看到LV包包后，ha ha大笑</li>
    </ul>
  </li>
</ul>

<p><strong>去除a元素默认的:focus效果</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a:focus {
	outline:none;
}
</code></pre></div></div>

<blockquote>
  <p>或者将tabindex属性设置为-1</p>
</blockquote>

<p><strong>tabindex属性</strong></p>

<ul>
  <li>
    <p>使用tabindex可以控制tab键选中元素的顺序，从1开始</p>
  </li>
  <li>
    <p>tabindex设置为-1，代表禁止使用tab键选中</p>
  </li>
  <li>
    <p>结构伪类</p>

    <ul>
      <li>:nth-child(an+b)
        <ul>
          <li>是<strong>父元素</strong>中的第几个子元素</li>
          <li>nth-child(2n)和nth-child(even) 表示是父元素中的第偶数个子元素（第2、4、6、8……个）</li>
          <li>nth-child(2n + 1)跟:nth-child(odd)同义 表示是父元素中的第奇数个子元素（第1、3、5、7……个）</li>
        </ul>
      </li>
      <li>:nth-last-child(an+b)
        <ul>
          <li>从父元素的最后一个子元素开始往前计数</li>
          <li>nth-last-child(1)，代表从父元素的倒数第一个子元素</li>
          <li>nth-last-child(-n + 2)，代表从父元素的最后2个子元素</li>
        </ul>
      </li>
      <li>:nth-of-type(an+b)
        <ul>
          <li>是<strong>父元素</strong>中<strong>同种类型</strong>的子元素开始往后计数</li>
        </ul>
      </li>
      <li>:nth-last-of-type(an+b)
        <ul>
          <li>是<strong>父元素</strong>中<strong>同种类型</strong>的子元素开始往前计数</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>否定伪类</p>
    <ul>
      <li>not()的格式是:not(x)</li>
      <li>x是一个简单选择器</li>
      <li>元素选择器、通用选择器、属性选择器、类选择器、id选择器、伪类（除否定伪类）</li>
      <li>:not(x)表示除x以外的元素</li>
      <li>not()支持简单选择器，不支持组合</li>
    </ul>
  </li>
</ul>

<h3 id="伪元素">伪元素</h3>

<p>为了区分伪元素和伪类，建议伪元素使用2个冒号</p>

<ul>
  <li>::first-line
    <ul>
      <li>::first-line可以针对首行文本设置属性</li>
      <li>只有下列属性可以应用在::first-line伪元素</li>
      <li>字体属性、颜色属性、背景属性</li>
      <li>word-spacing、letter-spacing、text-decoration、text-transform、line-height</li>
    </ul>
  </li>
  <li>::first-letter
    <ul>
      <li>::first-letter可以针对首字母设置属性</li>
      <li>只有下列属性可以应用在::first-letter伪元素</li>
      <li>字体属性、margin属性、padding属性、border属性、颜色属性、背景属性</li>
      <li>text-decoration、text-transform、letter-spacing、word-spacing（适当的时候）、line-height、float、vertical-align（只有当float是none时）</li>
    </ul>
  </li>
  <li>::before
    <ul>
      <li>::before和::after用来在一个元素的内容之前或之后插入其他内容（可以是文字、图片）</li>
    </ul>
  </li>
  <li>::after</li>
</ul>

<h3 id="css属性的特性">CSS属性的特性</h3>

<h4 id="继承性">继承性</h4>

<ul>
  <li>CSS中有些属性是可继承的，何为属性的继承？</li>
  <li>一个元素如果没有设置某属性的值，就会跟随父元素的值
当然，一个元素如果有设置某属性的值，就使用自己设置的值</li>
  <li>比如color、font-size等属性都是可以继承的</li>
  <li>究竟哪些属性可以继承，不用死记硬背，用多了自然熟练。而且可以随时查阅官方文档找到答案</li>
  <li>不能继承的属性，一般可以使用inherit值强制继承</li>
  <li>浏览器的开发者工具也会标识出哪些样式是继承过来的</li>
</ul>

<p><strong>注意:</strong> CSS属性继承的是计算值，并不是当初编写属性时的指定值（字面值）</p>

<h4 id="层叠性">层叠性</h4>

<ul>
  <li>CSS允许多个相同名字的CSS属性层叠同在一个元素上</li>
  <li>层叠后的结果是：只有一个CSS属性会生效</li>
  <li>浏览器的开发者工具非常清晰地显示了哪个CSS属性会生效</li>
  <li>哪个CSS属性会生效，取决于CSS属性所处环境的优先级高低</li>
</ul>

<h4 id="优先级">优先级</h4>

<p>按照经验，为了方便比较CSS属性的优先级，可以给CSS属性所处的环境定义一个权值（权重）</p>

<ul>
  <li>!important：10000</li>
  <li>内联样式：1000</li>
  <li>id选择器：100</li>
  <li>类选择器、属性选择器、伪类：10</li>
  <li>元素选择器、伪元素：1</li>
  <li>通配符：0</li>
</ul>

<p>比较优先级的严谨方法</p>

<ul>
  <li>从权值最大的开始比较每一种权值的数量多少，数量多的则优先级高，即可结束比较</li>
  <li>如果数量相同，比较下一个较小的权值，以此类推</li>
  <li>如果所有权值比较完毕后，发现数量都相同，就采取“就近原则”</li>
</ul>

<p><strong>总结：</strong>选择器的针对性越强，优先级越高</p>

:ET